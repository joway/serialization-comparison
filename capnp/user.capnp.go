// Code generated by capnpc-go. DO NOT EDIT.

package user

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type User struct{ capnp.Struct }

// User_TypeID is the unique identifier for the type User.
const User_TypeID = 0x9dcbeb11c4c13ea5

func NewUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return User{st}, err
}

func NewRootUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return User{st}, err
}

func ReadRootUser(msg *capnp.Message) (User, error) {
	root, err := msg.RootPtr()
	return User{root.Struct()}, err
}

func (s User) String() string {
	str, _ := text.Marshal(0x9dcbeb11c4c13ea5, s.Struct)
	return str
}

func (s User) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s User) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s User) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s User) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s User) Email() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s User) HasEmail() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s User) EmailBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s User) SetEmail(v string) error {
	return s.Struct.SetText(1, v)
}

// User_List is a list of User.
type User_List struct{ capnp.List }

// NewUser creates a new list of User.
func NewUser_List(s *capnp.Segment, sz int32) (User_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return User_List{l}, err
}

func (s User_List) At(i int) User { return User{s.List.Struct(i)} }

func (s User_List) Set(i int, v User) error { return s.List.SetStruct(i, v.Struct) }

func (s User_List) String() string {
	str, _ := text.MarshalList(0x9dcbeb11c4c13ea5, s.List)
	return str
}

// User_Promise is a wrapper for a User promised by a client call.
type User_Promise struct{ *capnp.Pipeline }

func (p User_Promise) Struct() (User, error) {
	s, err := p.Pipeline.Struct()
	return User{s}, err
}

const schema_e9e41470b2c8e533 = "x\xda\x120r`\x12d\x8dg`\x08dae\xfb" +
	"\xbf\xd4\xee\xe0\x11\xc1\xd7\xa7\xe72\x08\x0a2\xfe7~" +
	"zbS\x81\xc8\x93\x97\x0c\xacL\xec\x0c\x0c\x82\xa2\x9b" +
	"\x04eA\xb4d9\x03\xe3\xff\xe4\xc4\x82\xbc\x02\xfd\xd2" +
	"b\xc6\xd4\"=0[\xde*\xb48\xb5(\x80\x911" +
	"\x90\x83\x99\x85\x81\x81\x85\x91\x81APS\x8b\x81!P" +
	"\x85\x991\xd0\x80\x89Q\x90\x91Q\x84\x11$\xa8k\xc4" +
	"\xc0\x10\xa8\xc1\xcc\x18h\xc2\xc4\xc8\x9f\x97\x98\x9b\xca\xc8" +
	"\xc3\xc0\xc4\xc8\xc3\xc0(\x9f\x9a\x9b\x98\x99\x03\xe3\x01\x02" +
	"\x00\x00\xff\xff\x90\xeb\x1f\xe6"

func init() {
	schemas.Register(schema_e9e41470b2c8e533,
		0x9dcbeb11c4c13ea5)
}
